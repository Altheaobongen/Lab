# oxo_game.py
import random
import oxo_data

class Game:
    def __init__(self):
        self.board = [" "] * 9

    def new_game(self):
        self.board = [" "] * 9

    def save_game(self):
        oxo_data.saveGame(self.board)

    def restore_game(self):
        try:
            board = oxo_data.restoreGame()
            if len(board) == 9:
                self.board = board
            else:
                self.new_game()
        except IOError:
            self.new_game()

    def _generate_move(self):
        options = [i for i, cell in enumerate(self.board) if cell == " "]
        return random.choice(options) if options else -1

    def _is_winning_move(self):
        wins = ((0,1,2), (3,4,5), (6,7,8),
                (0,3,6), (1,4,7), (2,5,8),
                (0,4,8), (2,4,6))
        for a, b, c in wins:
            chars = self.board[a] + self.board[b] + self.board[c]
            if chars == "XXX" or chars == "OOO":
                return True
        return False

    def user_move(self, cell):
        if self.board[cell] != " ":
            raise ValueError("Invalid cell")
        self.board[cell] = "X"
        return "X" if self._is_winning_move() else ""

    def computer_move(self):
        cell = self._generate_move()
        if cell == -1:
            return "D"
        self.board[cell] = "O"
        return "O" if self._is_winning_move() else ""

    def get_board(self):
        return self.board

    def print_board(self):
        print(self.board)

# Console Test
if __name__ == "__main__":
    g = Game()
    g.new_game()
    result = ""
    while not result:
        g.print_board()
        try:
            result = g.user_move(g._generate_move())
        except ValueError:
            print("Invalid move by user")
        if not result:
            result = g.computer_move()

        if result == "D":
            print("It's a draw.")
        elif result:
            print(f"Winner is: {result}")
    g.print_board()
